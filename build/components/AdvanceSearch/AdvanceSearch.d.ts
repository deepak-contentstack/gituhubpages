import { Component } from 'react';
import './AdvanceSearch.css';
declare class AdvanceSearch extends Component<any, any> {
    state: {
        queryArray: any;
        isSearchVisible: boolean;
        tagEditingIndex: any;
        isEditing: boolean;
        tagCursor: number;
        isAdvanceQueryDropdownOpen: boolean;
        selectedOption: {
            label: string;
            value: string;
            placeholder: string;
        };
        isAutoCompleteOpen: boolean;
        inputValue: string;
        isResetInput: boolean;
        tagInputValue: string;
        isContentEditableFocused: boolean;
        placeholder: string;
        case: string;
        advanceQueryArray: any[];
        horizontalAdvQueryLength: number;
        savedSearches: any[];
        recentSearches: any[];
        isDropdownOpen: boolean;
        filters: any[];
        advanceQueryByFilters: any[];
        selectedCtStatus: any;
        suggestedSyntaxCase: boolean;
        isLoading: boolean;
        isLoadingSearches: boolean;
        isBuildingRecentSearches: boolean;
        errorMessage: string;
        vCursor: number;
        hCursor: number;
        hLength: {
            [x: number]: {
                entries: number;
                assets: number;
            };
        };
        queryInitUid: string;
        selectedModuleUid: string;
        searchQueryDataUid: string;
    };
    filterInputRef: any;
    child: any;
    savedViewRef: any;
    autoCompleteRef: any;
    isCursorInside: boolean;
    disableRecentSearchCall: boolean;
    textContent: any;
    canFetchSavedAndRecentSearch: boolean;
    componentDidMount(): Promise<void>;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: any, prevState: any): Promise<void>;
    setRecentSearch: (recentSearches: any) => Promise<void>;
    handleClickOutside: (event: any) => void;
    handleKeyDown: (event: any) => void;
    registerKeybindings: (event: any) => void;
    updateHLengthByVCursor: (data: any) => void;
    updateTagCursor: (updatedCursor: any) => void;
    updateQueryArray: (currentSearch: any, action: any, editableQueryIndex: any, isMulti: any) => void;
    deleteSearchQuery: (tagCursor?: any) => void;
    setSavedAndRecentSearch: () => Promise<void>;
    setSearchVisibility: (isSearchVisible: any) => void;
    openEditDropdown: (queryIndex: any, event?: any) => void;
    closeEditDropdown: () => void;
    updateInputValue: (e: any) => void;
    resetInputValue: () => void;
    onEditTag: (e: any) => void;
    onBlurTagEditing: () => void;
    onClickTagInput: () => void;
    onChangeSelect: (selectedOption: any, queryArray?: any[], isSearchSubmit?: boolean, canSetDefaultHLength?: boolean) => void;
    onSearchSubmit: (data: any) => Promise<void>;
    openAutoComplete: (event: any) => void;
    closeAutoComplete: () => void;
    clearAndCloseSearch: () => void;
    setPlaceholder: (placeholder: any) => void;
    openAdvanceQueryDropdown: () => void;
    closeAdvanceQueryDropdown: () => void;
    onClickMatchAnyOrAll: (selectedMatch: any) => void;
    updateAdvanceQueryMatchCase: (selectedMatch: any, currentQuery: any) => void;
    updateAdvanceQueryArray: (data: any) => void;
    onDeleteAdvanceQuery: ({ currentAdvanceQueryArray, index }: {
        currentAdvanceQueryArray: any;
        index: any;
    }) => void;
    setDropdownOpenStatus: (status: any) => void;
    onClickSeeResults: () => Promise<void>;
    fetchAllviews: () => Promise<void>;
    createSavedView: (name: any) => Promise<void>;
    handleRecentSearchClick: (search: any) => Promise<void>;
    handleSavedSearchClick: (search: any) => Promise<void>;
    onClickFilters: () => void;
    updateFilter: (filterData: any) => void;
    onClickFilterResult: () => void;
    onClickSuggestedSyntax: (syntax: any) => void;
    handleRemove: (e: any, queryIndex: any) => void;
    resetRecentSearch: () => Promise<void>;
    onClickSearchIcon: () => void;
    render(): JSX.Element;
}
export default AdvanceSearch;
